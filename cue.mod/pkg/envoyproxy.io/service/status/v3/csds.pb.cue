package v3

import (
	v3 "envoyproxy.io/type/matcher/v3"
	v31 "envoyproxy.io/config/core/v3"
	v32 "envoyproxy.io/admin/v3"
)

// Status of a config from a management server view.
#ConfigStatus: "UNKNOWN" | "SYNCED" | "NOT_SENT" | "STALE" | "ERROR"

ConfigStatus_UNKNOWN:  "UNKNOWN"
ConfigStatus_SYNCED:   "SYNCED"
ConfigStatus_NOT_SENT: "NOT_SENT"
ConfigStatus_STALE:    "STALE"
ConfigStatus_ERROR:    "ERROR"

// Config status from a client-side view.
#ClientConfigStatus: "CLIENT_UNKNOWN" | "CLIENT_REQUESTED" | "CLIENT_ACKED" | "CLIENT_NACKED"

ClientConfigStatus_CLIENT_UNKNOWN:   "CLIENT_UNKNOWN"
ClientConfigStatus_CLIENT_REQUESTED: "CLIENT_REQUESTED"
ClientConfigStatus_CLIENT_ACKED:     "CLIENT_ACKED"
ClientConfigStatus_CLIENT_NACKED:    "CLIENT_NACKED"

// Request for client status of clients identified by a list of NodeMatchers.
#ClientStatusRequest: {
	"@type": "type.googleapis.com/envoy.service.status.v3.ClientStatusRequest"
	// Management server can use these match criteria to identify clients.
	// The match follows OR semantics.
	node_matchers?: [...v3.#NodeMatcher]
	// The node making the csds request.
	node?: v31.#Node
}

// Detailed config (per xDS) with status.
// [#next-free-field: 8]
#PerXdsConfig: {
	"@type": "type.googleapis.com/envoy.service.status.v3.PerXdsConfig"
	// Config status generated by management servers. Will not be present if the
	// CSDS server is an xDS client.
	status?: #ConfigStatus
	// Client config status is populated by xDS clients. Will not be present if
	// the CSDS server is an xDS server. No matter what the client config status
	// is, xDS clients should always dump the most recent accepted xDS config.
	//
	// .. attention::
	//   This field is deprecated. Use :ref:`ClientResourceStatus
	//   <envoy_v3_api_enum_admin.v3.ClientResourceStatus>` for per-resource
	//   config status instead.
	//
	// Deprecated: Do not use.
	client_status?:       #ClientConfigStatus
	listener_config?:     v32.#ListenersConfigDump
	cluster_config?:      v32.#ClustersConfigDump
	route_config?:        v32.#RoutesConfigDump
	scoped_route_config?: v32.#ScopedRoutesConfigDump
	endpoint_config?:     v32.#EndpointsConfigDump
}

// All xds configs for a particular client.
#ClientConfig: {
	"@type": "type.googleapis.com/envoy.service.status.v3.ClientConfig"
	// Node for a particular client.
	node?: v31.#Node
	// This field is deprecated in favor of generic_xds_configs which is
	// much simpler and uniform in structure.
	//
	// Deprecated: Do not use.
	xds_config?: [...#PerXdsConfig]
	// Represents generic xDS config and the exact config structure depends on
	// the type URL (like Cluster if it is CDS)
	generic_xds_configs?: [...#ClientConfig_GenericXdsConfig]
}

#ClientStatusResponse: {
	"@type": "type.googleapis.com/envoy.service.status.v3.ClientStatusResponse"
	// Client configs for the clients specified in the ClientStatusRequest.
	config?: [...#ClientConfig]
}

// GenericXdsConfig is used to specify the config status and the dump
// of any xDS resource identified by their type URL. It is the generalized
// version of the now deprecated ListenersConfigDump, ClustersConfigDump etc
// [#next-free-field: 10]
#ClientConfig_GenericXdsConfig: {
	"@type": "type.googleapis.com/envoy.service.status.v3.ClientConfig_GenericXdsConfig"
	// Type_url represents the fully qualified name of xDS resource type
	// like envoy.v3.Cluster, envoy.v3.ClusterLoadAssignment etc.
	type_url?: string
	// Name of the xDS resource
	name?: string
	// This is the :ref:`version_info <envoy_v3_api_field_service.discovery.v3.DiscoveryResponse.version_info>`
	// in the last processed xDS discovery response. If there are only
	// static bootstrap listeners, this field will be ""
	version_info?: string
	// The xDS resource config. Actual content depends on the type
	xds_config?: _
	// Timestamp when the xDS resource was last updated
	last_updated?: string
	// Per xDS resource config status. It is generated by management servers.
	// It will not be present if the CSDS server is an xDS client.
	config_status?: #ConfigStatus
	// Per xDS resource status from the view of a xDS client
	client_status?: v32.#ClientResourceStatus
	// Set if the last update failed, cleared after the next successful
	// update. The *error_state* field contains the rejected version of
	// this particular resource along with the reason and timestamp. For
	// successfully updated or acknowledged resource, this field should
	// be empty.
	// [#not-implemented-hide:]
	error_state?: v32.#UpdateFailureState
	// Is static resource is true if it is specified in the config supplied
	// through the file at the startup.
	is_static_resource?: bool
}

// ClientStatusDiscoveryServiceClient is the client API for ClientStatusDiscoveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
#ClientStatusDiscoveryServiceClient: _

#ClientStatusDiscoveryService_StreamClientStatusClient: _

// ClientStatusDiscoveryServiceServer is the server API for ClientStatusDiscoveryService service.
#ClientStatusDiscoveryServiceServer: _

// UnimplementedClientStatusDiscoveryServiceServer can be embedded to have forward compatible implementations.
#UnimplementedClientStatusDiscoveryServiceServer: {
	"@type": "type.googleapis.com/envoy.service.status.v3.UnimplementedClientStatusDiscoveryServiceServer"
}

#ClientStatusDiscoveryService_StreamClientStatusServer: _
